#
# Syntax highlighting for Agda, used by github
#

scopeName: source.agda
name: Agda
fileTypes:
- agda

patterns:
- # Line comments
  begin: '--'
  end: '$'
  name: comment.line.double-dash.agda
- # Block comments
  begin: '{-[^#]'
  end: '-}'
  name: comment.block.agda
- # Pragmas
  begin: '{-#'
  end: '#-}'
  name: support.other.agda
- # String literals
  begin: '"'
  end: '"'
  name: string.quoted.double.agda
- # Character literals
  match: '''([^\\'']|\\[''\\"[:alnum:]]+)'''
  name: constant.char.agda
- # Number literals
  match: '(^|[[:space:]\(\){}])(-?\d+|0x[\dABCDEF]+|-?\d+\.\d+((e|E)(\+|-)?\d+)?|-?\d+(e|E)(\+|-)?\d+)($|[[:space:]\(\){}])'
  captures:
    '2':
      name: constant.numeric.agda
- # Definition of datatypes/records/modules
  match: '\b(data|record|module)[[:space:]]+([^;\(\){}@"[:space:]]+)'
  captures:
    '1':
      name: keyword.other.agda
    '2':
      name: entity.name.type.agda
- # Opening/importing modules
  match: '\b(open *import|open|import)\b[[:space:]]+([^;\(\){}@"[:space:]]+)'
  captures:
    '1':
      name: keyword.other.agda
    '2':
      name: entity.name.type.agda
- # Fixity
  match: '\b(infix|infixr|infixl)\b[[:space:]]+[-0123456789.]+[[:space:]]+([^\n]+)'
  captures:
    '1':
      name: keyword.other.agda
    '2':
      name: entity.name.agda
- # Goals
  match: '([.^;\(\){}@"[:space:]](\?)[.$;\(\){}@"[:space:]]|({!.*!}))'
  captures:
    '2':
      name: entity.name.tag.agda
    '3':
      name: entity.name.tag.agda
- # Other keywords
  name: keyword.other.agda
  match: '\b(abstract|constructor|data|do|eta-equality|field|forall|hiding|import|in|inductive|infix|infixl|infixr|instance|let|macro|module|mutual|no-eta-equality|open|overlap|pattern|postulate|primitive|private|public|quote|quoteContext|quoteGoal|quoteTerm|record|renaming|rewrite|syntax|tactic|unquote|unquoteDecl|unquoteDef|using|variable|where|with)\b'
- # Keywords for universes, like Set₁ etc. The issue is that \b does not
  # recognize subscripts as being parts of words, so it does not work to end the
  # regexp with \b. We do it in a somewhat ad-hoc way.
  match: '\b((Set|Prop)[0123456789₀₁₂₃₄₅₆₇₈₉]*)($|[[:space:]\(\)\{\}])'
  captures:
    '1':
      name: constant.language.agda
- # Same issue with λ, → and ∀
  match: '[[:space:]^\(\)\{\}](λ|→|∀)[$[:space:]\(\)\{\}]'
  captures:
    '1':
      name: keyword.other.agda
- # Type declarations
  match: '^(([[:space:]]+|abstract|instance|macro|pattern|postulate|primitive|private|syntax|variable|where)*)([^;\(\){}@"[:space:]]+)[[:space:]]+:'
  captures:
    '1':
      name: keyword.other.agda
    '3':
      name: entity.name.agda

# - # Definitions, does not work properly for infix operators and definitions by copatterns…
#   match: '^(([[:space:]]|abstract|instance|macro|pattern|postulate|primitive|private|syntax|variable|where)*)([^;\(\){}@"[:space:]]+)([[:space:]]+[^;"[:space:]]+)*[[:space:]]+='
#   captures:
#     '1':
#       name: keyword.other.agda
#     '3':
#       name: entity.name.agda
